{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/create.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","ActionBtn","props","tweet","action","didPerformAction","likes","actionDisplay","display","type","className","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","hideActions","Tweet","didRetweet","useState","actionTweet","setActionTweet","match","window","location","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","href","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","onSubmit","newVal","current","value","ref","required","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","StrictMode","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,gLCgBpC,IAAMC,EAAgB,SAACC,EAAQC,EAAUC,EAAUC,GACxD,IAAIC,EACAD,IACFC,EAAWC,KAAKC,UAAUH,IAK5B,IAAMI,EAAM,IAAIC,eACVC,EAAG,mCAA+BR,GAExCM,EAAIG,aAAe,OACnB,IAAMC,EA5BR,SAAmBC,GACjB,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE5B,IADA,IAAIC,EAAUF,SAASC,OAAOE,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,IAAIH,EAASC,EAAQE,GAAGE,OAExB,GAAIL,EAAOM,UAAU,EAAGT,EAAKO,OAAS,KAAQP,EAAO,IAAM,CACvDC,EAAcS,mBAAmBP,EAAOM,UAAUT,EAAKO,OAAS,IAChE,OAIZ,OAAON,EAeWU,CAAU,aAE5BhB,EAAIiB,KAAKxB,EAAQS,GACjBF,EAAIkB,iBAAiB,eAAgB,oBAEjCd,IACFJ,EAAIkB,iBAAiB,wBAAyB,kBAC9ClB,EAAIkB,iBAAiB,mBAAoB,kBACzClB,EAAIkB,iBAAiB,cAAed,IAGtCJ,EAAImB,OAAS,WACXxB,EAASK,EAAIoB,SAAUpB,EAAIqB,SAI7BrB,EAAIsB,QAAU,SAASC,GACrBC,QAAQC,IAAIF,GACZ5B,EAAS,CAAC,QAAW,4BAA6B,MAGpDK,EAAI0B,KAAK7B,IC9CE8B,EAAY,SAACC,GAAW,IAC1BC,EAAmCD,EAAnCC,MAAOC,EAA4BF,EAA5BE,OAAQC,EAAoBH,EAApBG,iBAChBC,EAAQH,EAAMG,MAAQH,EAAMG,MAAQ,EACpCC,EAAgBH,EAAOI,QAAUJ,EAAOI,QAAU,SAClDA,EAA0B,SAAhBJ,EAAOK,KAAP,UAA4BH,EAA5B,YAAqCC,GAAkBA,EACjEG,EAAYR,EAAMQ,UAAYR,EAAMQ,UAAY,yBAetD,OAAO,4BAAQA,UAAWA,EAAWC,QAbjB,SAACC,GACnBA,EAAMC,kBCLkB,SAACC,EAASV,EAAQnC,GAE9CH,EAAc,OAAQ,kBAAmBG,EAD5B,CAAC8C,GAAID,EAASV,OAAQA,IDY/BY,CAAeb,EAAMY,GAAIX,EAAOK,MAPC,SAACf,EAAUC,GAC1CG,QAAQC,IAAIL,EAAUC,GACN,MAAXA,GAA6B,MAAXA,IAAmBU,GACxCA,EAAiBX,EAAUC,QAQ2Ba,I,qBEnBnDS,EAAc,SAACf,GAAW,IAC5BC,EAASD,EAATC,MACP,OAAOA,EAAMe,OAAS,yBAAKR,UAAU,OACnC,yBAAKA,UAAU,qCACb,uBAAGA,UAAU,yBAAb,WACA,kBAAC,EAAD,CAAOS,aAAW,EAACT,UAAU,IAAIP,MAAOA,EAAMe,WAEzC,MAGEE,EAAQ,SAAClB,GAAW,IACxBC,EAAkCD,EAAlCC,MAAOkB,EAA2BnB,EAA3BmB,WAAYF,EAAejB,EAAfiB,YADI,EAEQG,mBAASpB,EAAMC,MAAQD,EAAMC,MAAQ,MAF7C,mBAEvBoB,EAFuB,KAEVC,EAFU,KAGxBd,EAAYR,EAAMQ,UAAYR,EAAMQ,UAAY,0BAEhDe,EADOC,OAAOC,SAASC,SACVH,MAAL,YAAW,WAAX,cACRI,EAAaJ,EAAQA,EAAMK,OAAOC,SAAW,EAE7CC,EAAW,UAAG7B,EAAMY,MAAT,UAAqBc,GAMhCI,EAAsB,SAACC,EAAgBvC,GAC5B,MAAXA,EACF6B,EAAeU,GACK,MAAXvC,GACL0B,GACFA,EAAWa,IAMjB,OAAO,yBAAKxB,UAAWA,GACnB,6BACE,2BAAIP,EAAMY,GAAV,KAAgBZ,EAAMgC,SACtB,kBAAC,EAAD,CAAahC,MAAOA,KAItB,yBAAKO,UAAU,iBACXa,IAA+B,IAAhBJ,GAAyB,kBAAC,IAAMiB,SAAP,KACxC,kBAAC,EAAD,CAAWjC,MAAOoB,EAAalB,iBAAkB4B,EAAqB7B,OAAQ,CAACK,KAAM,OAAQD,QAAS,WACtG,kBAAC,EAAD,CAAWL,MAAOoB,EAAalB,iBAAkB4B,EAAqB7B,OAAQ,CAACK,KAAM,SAAUD,QAAS,YACxG,kBAAC,EAAD,CAAWL,MAAOoB,EAAalB,iBAAkB4B,EAAqB7B,OAAQ,CAACK,KAAM,UAAWD,QAAS,eAE7F,IAAbwB,EAAoB,KAAO,4BAAQtB,UAAU,iCAAiCC,QA7BlE,SAACC,GAClBA,EAAMC,iBACNa,OAAOC,SAASU,KAAhB,WAA2BlC,EAAMY,MA2BD,WChDzBuB,EAAc,SAACpC,GAC1B,IAAMqC,EAAcC,IAAMC,YACnBC,EAAYxC,EAAZwC,SAEDC,EAAsB,SAACjD,EAAUC,GACtB,MAAXA,EACF+C,EAAShD,GAETkD,MAAM,uCAcV,OAAO,yBAAKlC,UAAWR,EAAMQ,WAC3B,yBAAKA,UAAWR,EAAMQ,WACpB,0BAAMmC,SAZW,SAACjC,GAEpBA,EAAMC,iBACN,IAAMiC,EAASP,EAAYQ,QAAQC,MFhBnClF,EAAc,OAAQ,kBEkBC6E,EFlB4B,CAACR,QEkBrCW,IAEfP,EAAYQ,QAAQC,MAAQ,KAMxB,8BAAUC,IAAKV,EAAaW,UAAQ,EAACxC,UAAU,4BAA4B/B,KAAK,UAGhF,4BAAQ8B,KAAK,SAASC,UAAU,wBAAhC,aC1BKyC,EAAa,SAACjD,GAAW,IAAD,EACGoB,mBAAS,IADZ,mBAC1B8B,EAD0B,KACdC,EADc,OAEL/B,mBAAS,IAFJ,mBAE1BgC,EAF0B,KAElBC,EAFkB,OAGOjC,oBAAS,GAHhB,mBAG1BkC,EAH0B,KAGZC,EAHY,KAIjCC,qBAAU,WACR,IAAMC,EAAQ,YAAIzD,EAAM0D,WAAWC,OAAOT,GACtCO,EAAMzE,SAAWoE,EAAOpE,QAC1BqE,EAAUI,KAEX,CAACzD,EAAM0D,UAAWN,EAAQF,IAC7BM,qBAAU,WACR,IAAqB,IAAjBF,EAAwB,EHFN,SAACM,EAAU7F,GACrC,IAAID,EAAW,WACX8F,IACF9F,EAAQ,4BAAwB8F,IAElChG,EAAc,MAAOE,EAAUC,GGOzB8F,CAAa7D,EAAM4D,UATW,SAACpE,EAAUC,GACxB,MAAXA,GACF0D,EAAc3D,GACd+D,GAAgB,IAEhBb,MAAM,4BAQX,CAACQ,EAAYI,EAAcC,EAAiBvD,EAAM4D,WAErD,IAAME,EAAmB,SAACC,GACxB,IAAMC,EAAgB,YAAOd,GAC7Bc,EAAiBC,QAAQF,GACzBZ,EAAca,GAEd,IAAME,EAAiB,YAAOd,GAC9Bc,EAAkBD,QAAQb,GAC1BC,EAAUa,IAGZ,OAAOd,EAAOe,KAAI,SAACC,EAAMC,GACvB,OAAO,kBAAC,EAAD,CACLpE,MAAOmE,EACPjD,WAAY2C,EACZQ,IAAG,UAAKD,EAAL,YAAcD,EAAKvD,IACtBL,UAAU,uECzCL+D,EAAkB,SAACvE,GAAW,IAAD,EACNoB,mBAAS,IADH,mBACjCsC,EADiC,KACtBc,EADsB,KAGlCC,EAA8B,UAAnBzE,EAAMyE,SAUvB,OAAO,yBAAKjE,UAAWR,EAAMQ,YACb,IAAbiE,GAAqB,kBAAC,EAAD,CAAajC,SATd,SAACuB,GACtB,IAAIW,EAAa,YAAOhB,GACxBgB,EAAcT,QAAQF,GACtBS,EAAaE,IAMgDlE,UAAU,gBACvE,kBAAC,EAAD,eAAYkD,UAAWA,GAAe1D,MAI7B2E,EAAuB,SAAC3E,GAAW,IACvCY,EAAWZ,EAAXY,QADsC,EAEXQ,oBAAS,GAFE,mBAEtCwD,EAFsC,KAE3BC,EAF2B,OAGnBzD,mBAAS,MAHU,mBAGtCnB,EAHsC,KAG/B6E,EAH+B,KAKvCC,EAAsB,SAACvF,EAAUC,GACtB,MAAXA,EACFqF,EAAStF,GAETkD,MAAM,0CAWV,OAPAc,qBAAU,YAEU,IAAdoB,KJ9BsB,SAAChE,EAAS7C,GACtCH,EAAc,MAAD,kBAAmBgD,EAAnB,KAA+B7C,GI8BxCiH,CAAepE,EAASmE,GACxBF,GAAa,MAEd,CAACjE,EAASgE,EAAWC,IACP,OAAV5E,EAAgB,KAAO,kBAAC,EAAD,CAAOA,MAAOA,EAAOO,UAAWR,EAAMQ,aChBvDyE,MAzBf,WAEE,OACE,yBAAKzE,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK0E,IAAKC,IAAM3E,UAAU,WAAW4E,IAAI,SACzC,mCACO,4CADP,wBAGA,6BACE,kBAAC,EAAD,OAEF,uBACE5E,UAAU,WACV2B,KAAK,sBACLkD,OAAO,SACPC,IAAI,uBAJN,kBCLYC,QACW,cAA7B/D,OAAOC,SAAS+D,UAEe,UAA7BhE,OAAOC,SAAS+D,UAEhBhE,OAAOC,SAAS+D,SAASjE,MACvB,2DCXN,IAAMkE,EAAQ9G,SAAS+G,eAAe,QAClCD,GACFE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFJ,GAIJ,IAAM9F,EAAI2C,IAAMwD,cAEVC,EAAWpH,SAAS+G,eAAe,aACrCK,GACFJ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACGlG,EAAE4E,EAAiBwB,EAASC,UAE/BD,GAIwBpH,SAASsH,iBAAiB,qBAClCC,SAAQ,SAAAC,GAC1BR,IAASC,OACP,kBAAC,IAAMC,WAAP,KACGlG,EAAEgF,EAAsBwB,EAAUH,UAErCG,MDgGE,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/G,QAAQ+G,MAAMA,EAAMC,c","file":"static/js/main.0ae221be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      var cookies = document.cookie.split(';');\r\n      for (var i = 0; i < cookies.length; i++) {\r\n          var cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport const backendLookup = (method, endpoint, callback, data) => {\r\n  let jsonData;\r\n  if (data) {\r\n    jsonData = JSON.stringify(data);\r\n  }\r\n\r\n  \r\n\r\n  const xhr = new XMLHttpRequest();\r\n  const url = `http://localhost:8000/api${endpoint}`;\r\n  \r\n  xhr.responseType = \"json\";\r\n  const csrftoken = getCookie('csrftoken');\r\n\r\n  xhr.open(method, url);\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n  if (csrftoken) {\r\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\r\n  }  \r\n\r\n  xhr.onload = function() {\r\n    callback(xhr.response, xhr.status);\r\n    \r\n  };\r\n  \r\n  xhr.onerror = function(e) {\r\n    console.log(e);\r\n    callback({\"message\": \"The request was an error\"}, 400)\r\n  }\r\n\r\n  xhr.send(jsonData);\r\n}","import React from 'react';\r\nimport {apiTweetAction} from './lookup';\r\n\r\nexport const ActionBtn = (props) => {\r\n    const {tweet, action, didPerformAction} = props;\r\n    const likes = tweet.likes ? tweet.likes : 0;\r\n    const actionDisplay = action.display ? action.display : \"Action\";\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay; \r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm';\r\n\r\n    const handleClick = (event) => {\r\n      event.preventDefault();\r\n      const handleActionBackendEvent = (response, status) => {\r\n        console.log(response, status);\r\n        if ((status === 200 || status === 201) && didPerformAction) {\r\n          didPerformAction(response, status);\r\n        }\r\n\r\n      };\r\n      apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\r\n      \r\n    };\r\n\r\n    return <button className={className} onClick={handleClick}>{display}</button>;\r\n};","import {backendLookup} from '../lookup';\r\n\r\nexport const apiTweetCreate = (newTweet, callback) => {\r\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet});\r\n}\r\n\r\nexport const apiTweetAction = (tweetId, action, callback) => {\r\n  const data = {id: tweetId, action: action};\r\n  backendLookup(\"POST\", \"/tweets/action/\", callback, data);\r\n}\r\n\r\nexport const apiTweetDetail = (tweetId, callback) => {\r\n  backendLookup(\"GET\", `/tweets/${tweetId}/`, callback);\r\n};\r\n  \r\nexport const apiTweetList = (username, callback) => {\r\n  let endpoint = \"/tweets/\";\r\n  if (username) {\r\n    endpoint = `/tweets/?username=${username}`\r\n  }\r\n  backendLookup(\"GET\", endpoint, callback);\r\n};","import React, {useState} from 'react';\r\n\r\nimport {ActionBtn} from './buttons';\r\n\r\nexport const ParentTweet = (props) => {\r\n    const {tweet} = props;\r\n    return tweet.parent ? <div className='row'>\r\n      <div className='col-11 mx-auto p-3 border rounded'>\r\n        <p className='mb-0 text-muted small'>Retweet</p>\r\n        <Tweet hideActions className=' ' tweet={tweet.parent} />\r\n      </div>\r\n    </div> : null;\r\n  };\r\n    \r\n  export const Tweet = (props) => {\r\n    const {tweet, didRetweet, hideActions} = props;\r\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null);\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\r\n    const path = window.location.pathname;\r\n    const match = path.match(/(?<tweetid>\\d+)/);\r\n    const urlTweetId = match ? match.groups.tweetid : -1;\r\n        \r\n    const isDetail = `${tweet.id}` === `${urlTweetId}`;\r\n    const handleLink = (event) => {\r\n      event.preventDefault();\r\n      window.location.href = `/${tweet.id}`;\r\n    };\r\n  \r\n    const handlePerformAction = (newActionTweet, status) => {\r\n      if (status === 200) {\r\n        setActionTweet(newActionTweet);\r\n      } else if (status === 201) {\r\n        if (didRetweet) {\r\n          didRetweet(newActionTweet)\r\n        }\r\n      }\r\n      \r\n    };\r\n  \r\n    return <div className={className}>\r\n        <div>\r\n          <p>{tweet.id}. {tweet.content}</p>\r\n          <ParentTweet tweet={tweet}/>\r\n  \r\n        </div>\r\n        \r\n        <div className=\"btn btn-group\">\r\n          {(actionTweet && hideActions !== true) && <React.Fragment>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"like\", display: \"Likes\"}}/>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"unlike\", display: \"Unlike\"}}/>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"Retweet\", display: \"Retweet\"}}/>\r\n          </React.Fragment>}\r\n          {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n        </div>\r\n    </div>\r\n  }","import React from 'react';\r\n\r\nimport {apiTweetCreate} from './lookup';\r\n\r\nexport const TweetCreate = (props) => {\r\n  const textAreaRef = React.createRef();\r\n  const {didTweet} = props;\r\n  \r\n  const handleBackendUpdate = (response, status) => {\r\n    if (status === 201) {\r\n      didTweet(response);\r\n    } else {\r\n      alert(\"An error orrured, please try again\");\r\n    }\r\n  };  \r\n  \r\n  const handleSubmit = (event) => {\r\n    // backend api request\r\n    event.preventDefault();\r\n    const newVal = textAreaRef.current.value;\r\n    \r\n    apiTweetCreate(newVal, handleBackendUpdate);\r\n    \r\n    textAreaRef.current.value = '';\r\n  }\r\n  \r\n  return <div className={props.className}>\r\n    <div className={props.className}>\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea ref={textAreaRef} required className='form-control w-25 mx-auto' name='tweet'>\r\n\r\n        </textarea>\r\n        <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n      </form>\r\n    </div>\r\n       \r\n  </div>\r\n};","import React, {useEffect, useState} from 'react';\r\n\r\nimport {Tweet} from './detail';\r\n\r\nimport {apiTweetList} from './lookup';\r\n\r\nexport const TweetsList = (props) => {\r\n    const [tweetsInit, setTweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([]);\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false);\r\n    useEffect(() => {\r\n      const final = [...props.newTweets].concat(tweetsInit);\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final);\r\n      }\r\n    }, [props.newTweets, tweets, tweetsInit]);    \r\n    useEffect(() => {\r\n      if (tweetsDidSet === false) {\r\n        const handleTweetListLookup = (response, status) => {\r\n          if (status === 200) {\r\n            setTweetsInit(response);\r\n            setTweetsDidSet(true);\r\n          } else {\r\n            alert(\"There was an error\")\r\n          }\r\n            \r\n        };\r\n        apiTweetList(props.username, handleTweetListLookup);\r\n      }\r\n      \r\n        \r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\r\n  \r\n    const handleDidRetweet = (newTweet) => {\r\n      const updateTweetsInit = [...tweetsInit];\r\n      updateTweetsInit.unshift(newTweet);\r\n      setTweetsInit(updateTweetsInit);\r\n  \r\n      const updateFinalTweets = [...tweets];\r\n      updateFinalTweets.unshift(tweets);\r\n      setTweets(updateFinalTweets);\r\n    }\r\n    \r\n    return tweets.map((item, index) => {\r\n      return <Tweet \r\n        tweet={item}\r\n        didRetweet={handleDidRetweet}\r\n        key={`${index}-${item.id}`} \r\n        className=\"my-5 py-5 border border-danger bg-white text-dark w-50 mx-auto\" \r\n      />\r\n    });\r\n  };","import React, {useState, useEffect} from 'react';\r\n\r\nimport {Tweet} from './detail';\r\nimport {apiTweetDetail} from './lookup';\r\nimport {TweetCreate} from './create';\r\nimport {TweetsList} from './list';\r\n\r\nexport const TweetsComponent = (props) => {\r\n  const [newTweets, setNewTweets] = useState([]);\r\n\r\n  const canTweet = props.canTweet === \"false\" ? false : true;\r\n  \r\n  const handleNewTweet = (newTweet) => {\r\n    let tempNewTweets = [...newTweets];\r\n    tempNewTweets.unshift(newTweet);\r\n    setNewTweets(tempNewTweets);\r\n    \r\n  };  \r\n  \r\n \r\n  return <div className={props.className}>\r\n    {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\r\n    <TweetsList newTweets={newTweets} {...props} />\r\n  </div>\r\n};\r\n\r\nexport const TweetDetailComponent = (props) => {\r\n  const {tweetId} = props;\r\n  const [didLookup, setDidLookup] = useState(false);\r\n  const [tweet, setTweet] = useState(null);\r\n\r\n  const handleBackendLookup = (response, status) => {\r\n    if (status === 200) {\r\n      setTweet(response);\r\n    } else {\r\n      alert(\"There was an error finding your tweet\");\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    \r\n    if (didLookup === false) {\r\n      apiTweetDetail(tweetId, handleBackendLookup)\r\n      setDidLookup(true);\r\n    }\r\n  }, [tweetId, didLookup, setDidLookup]);\r\n  return tweet === null? null : <Tweet tweet={tweet} className={props.className}/>;\r\n};\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {TweetsComponent} from './tweets';\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <div>\r\n          <TweetsComponent />\r\n        </div>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {TweetsComponent, TweetDetailComponent} from './tweets';\n\nconst appEl = document.getElementById('root');\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\nconst e = React.createElement;\n\nconst tweetsEl = document.getElementById('tweetme-2');\nif (tweetsEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      {e(TweetsComponent, tweetsEl.dataset)}\n    </React.StrictMode>,\n    tweetsEl\n  );\n};\n\nconst tweetDetailElements = document.querySelectorAll('.tweetme-2-detail');\ntweetDetailElements.forEach(container => {\n  ReactDOM.render(\n    <React.StrictMode>\n      {e(TweetDetailComponent, container.dataset)}\n    </React.StrictMode>,\n    container\n  );\n});\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}